{"version":3,"sources":["components/ErrorMessage.js","components/ErrorBoundary.js","reducers/cardReducer.js","constants/actionTypes.js","contexts/CardContext.js","reducers/tableReducer.js","contexts/TableContext.js","components/Loader.js","components/CardImage.js","components/Card.js","containers/CardContainer.js","actions/cardActions.js","constants/api.js","components/TableRow.js","components/Table.js","containers/TableContainer.js","actions/tableActions.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","error","Alert","show","variant","ErrorBoundary","state","showError","errorInfo","this","props","children","Component","cardReducer","action","type","loading","details","errorMessage","CardContext","createContext","initialState","CardContextProvider","useReducer","card","dispatch","Provider","value","tableReducer","data","totalCards","currentPage","page","TableContext","TableContextProvider","useParams","parseInt","table","history","useHistory","useEffect","push","window","scrollTo","Loader","className","Spinner","animation","CardImage","imageUris","useState","setLoading","small","normal","large","srcSet","sizes","src","alt","onLoad","Card","Object","keys","length","id","name","set_name","collector_number","legalities","set_type","rarity","flavor_text","oracle_text","image_uris","Container","fluid","map","key","legality","legalityText","replace","onClick","goBack","CardContainer","useContext","fetch","then","response","ok","status","Error","json","catch","toString","loadCard","TableRow","row","style","maxWidth","values","includes","filter","join","Table","striped","bordered","hover","TableContainer","total_cards","loadTable","paginaition","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","itemClass","linkClass","App","path","to","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.26f6c9da.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'react-bootstrap/Alert'\n\nconst ErrorMessage = ({ error }) => {\n  return (\n    <Alert show variant='danger'>\n      {error}\n    </Alert>\n  )\n}\n\nErrorMessage.propTypes = {\n  error: PropTypes.string.isRequired\n};\n\nexport default ErrorMessage;\n","import React, { Component } from 'react';\nimport ErrorMessaage from './ErrorMessage';\n\nclass ErrorBoundary extends Component {\n  state = { showError: false };\n\n  static getDerivedStateFromError(error) {\n    return { showError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Log error to console in development mode\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      console.log(errorInfo);\n    }\n  }\n\n  render() {\n    if (this.state.showError) {\n      const msg = 'Sorry, something went wrong. Please try again later';\n      return <ErrorMessaage error={msg} />\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import {\n  CARD_LOADING,\n  CARD_DETAILS,\n  CARD_ERROR\n} from '../constants/actionTypes';\n\n  export const cardReducer = (state, action) => {\n  switch(action.type) {\n    case CARD_LOADING:\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case CARD_DETAILS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        details: action.details\n      };\n    case CARD_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: true,\n        errorMessage: action.details\n      };\n    default:\n      return state;\n  }\n}\n","export const CARD_LOADING       = 'CARD_LOADING';\nexport const CARD_DETAILS       = 'CARD_DETAILS';\nexport const CARD_ERROR         = 'CARD_ERROR';\nexport const TABLE_LOADING      = 'TABLE_LOADING';\nexport const TABLE_DETAILS      = 'TABLE_DETAILS';\nexport const TABLE_ERROR        = 'TABLE_ERROR';\nexport const TABLE_SELECT_PAGE  = 'TABLE_SELECT_PAGE';\n","import React, { createContext, useReducer } from 'react';\nimport { cardReducer } from '../reducers/cardReducer';\n\nexport const CardContext = createContext();\n\nconst initialState = {\n  loading: false,\n  error: false,\n  errorMessage: null,\n  details: {}\n};\n\nconst CardContextProvider = props => {\n  const [card, dispatch] = useReducer(cardReducer, initialState);\n  return (\n    <CardContext.Provider value={{ card, dispatch }}>\n      {props.children}\n    </CardContext.Provider>\n  );\n}\n\nexport default CardContextProvider;\n","import {\n  TABLE_LOADING,\n  TABLE_DETAILS,\n  TABLE_ERROR,\n  TABLE_SELECT_PAGE\n} from '../constants/actionTypes';\n\nexport const tableReducer = (state, action) => {\n  switch(action.type) {\n    case TABLE_LOADING:\n      return {\n        ...state,\n        loading: true,\n        error: false\n      };\n    case TABLE_DETAILS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        data: action.data,\n        totalCards: action.totalCards\n      };\n    case TABLE_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: true,\n        errorMessage: action.details\n      };\n    case TABLE_SELECT_PAGE:\n      return {\n        ...state,\n        currentPage: action.page\n      };\n    default:\n      return state;\n  }\n}\n","import React, { createContext, useReducer, useEffect } from 'react';\nimport { tableReducer } from '../reducers/tableReducer';\nimport { useHistory, useParams } from 'react-router-dom';\n\nexport const TableContext = createContext();\n\nconst initialState = {\n  loading: false,\n  error: false,\n  errorMessage: null,\n  totalCards: 0,\n  data: {}\n};\n\nconst TableContextProvider = props => {\n\n  const { page } = useParams();\n  const [table, dispatch] = useReducer(\n    tableReducer,\n    initialState,\n    () => { return { currentPage: page ? parseInt(page,10) : 1}}\n  );\n\n  const history = useHistory();\n  useEffect(() => {\n    // Update the route when the table page changes\n    history.push(`/${table.currentPage}`);\n    // And scroll to the top of the page\n    window.scrollTo(0,0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table.currentPage])\n  \n  return (\n    <TableContext.Provider value={{ table, dispatch }}>\n      {props.children}\n    </TableContext.Provider>\n  )\n}\n\nexport default TableContextProvider;\n","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './Loader.css';\n\nconst Loader = () => {\n  return (\n    <div className='loader'>\n      <Spinner animation=\"border\" /> Loading...\n    </div>\n  )\n}\n\nexport default Loader;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './CardImage.css';\n\nconst CardImage = ({ imageUris }) => {\n  const [loading, setLoading] = useState(true);\n\n  const { small, normal, large } = imageUris;\n\n  return (\n    <div className='image'>\n      { loading ?\n        <Spinner animation='border' className='imageSpinner' />\n        :\n        null\n      }\n      <img\n        srcSet={`${small} 146w, ${normal} 680w, ${large} 936w`}\n        sizes='(max-width: 400px) 146px, (max-width: 1400px) 680px, 936px'\n        src={small}\n        alt='Card preview'\n        onLoad={() => { setLoading(false); }}\n      />\n    </div>\n  )\n}\n\nCardImage.propTypes = {\n  imageUris: PropTypes.object.isRequired\n};\n\nexport default CardImage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport BSCard from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container';\nimport CardImage from './CardImage';\nimport './Card.css';\n\nconst Card = ({ details }) => {\n  const history = useHistory();\n\n  // Do nothing if details object is empty\n  if (!Object.keys(details).length) {\n    return null;\n  }\n\n  const {\n    id, name, set_name, collector_number, legalities, set_type, rarity,\n    flavor_text, oracle_text, image_uris\n  } = details\n\n  return (\n    <Container fluid>\n      <div className='Card'>\n        <CardImage imageUris={image_uris} />\n        <BSCard className='details'>\n          <h1>{name}</h1>\n          <hr />\n          <p className='oracle'>{oracle_text}</p>\n          <p className='flavor'>{flavor_text}</p>\n          <hr />\n          <ul className='legalities'>\n          {\n            Object.keys(legalities).map((key) => {\n              const legality = legalities[key];\n              const legalityText = legality.replace('_',' ');\n              return (\n                <li className='legalityItem' key={key}>\n                  <span className={legality}>{legalityText}</span>&nbsp;{key}\n                </li>\n              )\n            })\n          }\n          </ul>\n        </BSCard>\n        <BSCard className='other'>\n          <p>\n            <span className='label'>Card id:</span> {id}\n          </p>\n          <p>\n            <span className='label'>Set name:</span> {set_name}\n          </p>\n          <p>\n            <span className='label'>Collector number:</span> {collector_number}\n          </p>\n          <p>\n            <span className='label'>Set type:</span> {set_type}\n          </p>\n          <p>\n            <span className='label'>Rarity:</span> {rarity}\n          </p>\n        </BSCard>\n      </div>\n      <button className='backButton' onClick={() => history.goBack()}>\n        Back\n      </button>\n    </Container>\n  )\n}\n\nCard.propTypes = {\n  details: PropTypes.object\n};\n\nexport default Card;\n","import React, { useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CardContext } from '../contexts/CardContext';\nimport { loadCard } from '../actions/cardActions';\nimport Loader from '../components/Loader';\nimport ErrorMessage from '../components/ErrorMessage';\nimport Card from '../components/Card';\n\nconst CardContainer = () => {\n  const { card, dispatch } = useContext(CardContext);\n  const { id } = useParams();\n\n  // Trigger loading of card details when id changes\n  useEffect(() => {\n    loadCard(dispatch, id)\n  }, [dispatch, id]);\n\n  const { loading, error, errorMessage, details } = card;\n  return (\n    <div>\n        { loading ? <Loader /> : null }\n        { error ? <ErrorMessage error={errorMessage} /> : null }\n        { details ? <Card details={details} /> : null}\n    </div>\n  );\n}\n\nexport default CardContainer;\n","import {\n  CARD_LOADING,\n  CARD_DETAILS,\n  CARD_ERROR\n} from '../constants/actionTypes';\n\nimport { BASE_URL } from '../constants/api';\n\nexport const loadCard = (dispatch, id) => {\n  dispatch({\n    type: CARD_LOADING\n  });\n  return fetch(`${BASE_URL}/cards/${id}`)\n  .then(response => {\n    if(!response.ok) {\n      if (response.status === 404) {\n        throw new Error('Card not found');\n      } else {\n        throw new Error('Unable to load card details');\n      }\n    }\n    return response.json()\n  })\n  .then(data => {\n    dispatch({\n      type: CARD_DETAILS,\n      details: data\n    })\n  })\n  .catch(error => {\n    dispatch({\n      type: CARD_ERROR,\n      details: error.toString()\n    });\n  });\n}\n","export const TABLE_ROWS_PER_PAGE = 175;\nexport const BASE_URL = 'https://api.scryfall.com';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nconst TableRow = ({ row }) => {\n  const history = useHistory();\n\n  const onClick = () => {\n    history.push(`/card/${row.id}`);\n  }\n\n  const {\n    id, name, set_name, collector_number, legalities, set_type, rarity,\n    flavor_text, oracle_text, image_uris\n  } = row;\n\n  const { small } = image_uris;\n\n  return (\n    <tr onClick={onClick} >\n      <td>\n        {id}\n      </td>\n      <td>\n        <img src={small} alt='Card preview' style={{maxWidth:'100%'}}/>\n      </td>\n      <td>\n        {name}\n      </td>\n      <td>\n        {set_name}\n      </td>\n      <td>\n        {collector_number}\n      </td>\n      <td>\n        {\n          Object.values(legalities).includes('legal') ?\n            Object.keys(legalities)\n              .filter(key => (legalities[key] === 'legal'))\n              .join(', ')\n            : 'none'\n        }\n      </td>\n      <td>\n        {set_type}\n      </td>\n      <td>\n        {rarity}\n      </td>\n      <td>\n        {flavor_text ? flavor_text : 'none'}\n      </td>\n      <td>\n        {oracle_text ? oracle_text: 'none'}\n      </td>\n    </tr>\n  )\n}\n\nTableRow.propTypes = {\n  row: PropTypes.object.isRequired\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport BSTable from 'react-bootstrap/Table';\nimport './Table.css';\n\nconst Table = ({ loading, data }) => {\n  return (\n      <BSTable striped bordered hover>\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Image</th>\n            <th>Name</th>\n            <th>Set Name</th>\n            <th>Collector Number</th>\n            <th>Legalities</th>\n            <th>Set Type</th>\n            <th>Rarity</th>\n            <th>Flavour</th>\n            <th>Oracle</th>\n          </tr>\n        </thead>\n        <tbody className={loading ? 'loading' : null}>\n          {data.map(row => <TableRow row={row} key={row.id}/>)}\n        </tbody>\n      </BSTable>\n  );\n}\n\nTable.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  data: PropTypes.object\n};\n\nexport default Table;\n","import React, { useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Pagination from \"react-js-pagination\";\nimport { TableContext } from '../contexts/TableContext';\nimport { loadTable } from '../actions/tableActions';\nimport Loader from '../components/Loader';\nimport ErrorMessage from '../components/ErrorMessage';\nimport Table from '../components/Table';\nimport { TABLE_SELECT_PAGE } from '../constants/actionTypes';\n\nconst TableContainer = () => {\n\n  const { table, dispatch } = useContext(TableContext);\n  let { page } = useParams();\n  if (!page) {\n    page = 1;\n  }\n\n  // Trigger loading of table rows when page changes\n  useEffect(() => {\n    loadTable(dispatch, page)\n  }, [dispatch, page]);\n\n  // Pagination click\n  const handlePageChange = (page) => {\n    dispatch({\n      type: TABLE_SELECT_PAGE,\n      page: page\n    })\n  }\n\n  const { loading, error, errorMessage, data, totalCards, currentPage } = table;\n\n  const paginaition = totalCards ? (\n    <Pagination\n        activePage={currentPage}\n        itemsCountPerPage={175}\n        totalItemsCount={totalCards}\n        pageRangeDisplayed={5}\n        onChange={handlePageChange}\n        itemClass=\"page-item\"\n        linkClass=\"page-link\"\n      />\n  )\n  : null\n\n  return (\n    <div className='Table'>\n      { paginaition }\n      { loading ? <Loader /> : null }\n      { error ? <ErrorMessage error={errorMessage} /> : null }\n      { totalCards ? <Table loading={loading} data={data} /> : null }\n      { paginaition }\n    </div>\n  );\n}\n\nexport default TableContainer;\n","import {\n  TABLE_LOADING,\n  TABLE_DETAILS,\n  TABLE_ERROR,\n} from '../constants/actionTypes';\n\nimport { BASE_URL } from '../constants/api';\n\nexport const loadTable = (dispatch, page) => {\n  dispatch({\n    type: TABLE_LOADING\n  });\n  return fetch(`${BASE_URL}/cards?page=${page}`)\n  .then(response => {\n    if(!response.ok) {\n      throw new Error('Unable to load table details')\n    }\n    return response.json()\n  })\n  .then(data => {\n    dispatch({\n      type: TABLE_DETAILS,\n      data: data.data,\n      totalCards: data.total_cards\n    })\n  })\n  .catch(error => {\n    dispatch({\n      type: TABLE_ERROR,\n      details: error.toString()\n    });\n  });\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport ErrorBoundary from './components/ErrorBoundary'\nimport CardContextProvider from './contexts/CardContext';\nimport TableContextProvider from './contexts/TableContext';\nimport CardContainer from './containers/CardContainer';\nimport TableContainer from './containers/TableContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Container fluid>\n        <ErrorBoundary>\n          <Switch>\n            <Route path='/card/:id'>\n              <CardContextProvider>\n                <CardContainer />\n              </CardContextProvider>\n            </Route>\n            <Route path='/:page'>\n              <TableContextProvider>\n                <TableContainer />\n              </TableContextProvider>\n            </Route>\n            {/* Fix for live demo on Github pages */}\n            <Route path='/binder'>\n              <Redirect to=\"/1\" />\n            </Route>\n          </Switch>\n        </ErrorBoundary>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}